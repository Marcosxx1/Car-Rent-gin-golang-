definitions:
  authdto.ChangePasswordDTO:
    properties:
      current_password:
        minLength: 8
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  authdto.LoginInputDTO:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  cardtos.CarInputDTO:
    properties:
      available:
        type: boolean
      brand:
        type: string
      category_id:
        type: string
      daily_rate:
        type: number
      description:
        type: string
      fine_amount:
        type: number
      license_plate:
        type: string
      name:
        type: string
      specification:
        items:
          $ref: '#/definitions/specificationdtos.SpecificationInputDto'
        type: array
    required:
    - available
    - brand
    - category_id
    - daily_rate
    - description
    - fine_amount
    - license_plate
    - name
    type: object
  cardtos.CarOutputDTO:
    properties:
      available:
        type: boolean
      brand:
        type: string
      category_id:
        type: string
      daily_rate:
        type: number
      description:
        type: string
      fine_amount:
        type: number
      id:
        type: string
      license_plate:
        type: string
      name:
        type: string
      specification:
        items:
          $ref: '#/definitions/specificationdtos.SpecificationOutputDto'
        type: array
    type: object
  categorydtos.CategoryInputDTO:
    properties:
      description:
        example: '''description is required'''
        type: string
      name:
        example: '''name is required'''
        type: string
    required:
    - description
    - name
    type: object
  categorydtos.CategoryOutputDTO:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  domain.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
  enums.MaintenanceStatus:
    enum:
    - Scheduled
    - In Progress
    - Completed
    - Pending Approval
    - Canceled
    - Awaiting Parts
    - Awaiting Payment
    - Rescheduled
    - Maintenance Failed
    - Awaiting Inspection
    type: string
    x-enum-varnames:
    - Scheduled
    - InProgress
    - Completed
    - PendingApproval
    - Canceled
    - AwaitingParts
    - AwaitingPayment
    - Rescheduled
    - MaintenanceFailed
    - AwaitingInspection
  maintenancedtos.MaintenanceInputDTO:
    properties:
      car_id:
        type: string
      description:
        type: string
      labor_cost:
        minimum: 1
        type: integer
      last_maintenance_date:
        type: string
      maintenance_completion_date:
        type: string
      maintenance_duration:
        type: string
      maintenance_notes:
        type: string
      maintenance_status:
        $ref: '#/definitions/enums.MaintenanceStatus'
      maintenance_type:
        type: string
      next_maintenance_due_date:
        type: string
      odometer_reading:
        minimum: 0
        type: integer
      parts:
        items:
          $ref: '#/definitions/maintenancedtos.PartInputDTO'
        type: array
      parts_cost:
        minimum: 1
        type: integer
      scheduled_maintenance:
        type: boolean
    required:
    - last_maintenance_date
    - maintenance_completion_date
    - maintenance_status
    - maintenance_type
    - next_maintenance_due_date
    - odometer_reading
    type: object
  maintenancedtos.MaintenanceOutputDTO:
    properties:
      car_id:
        type: string
      description:
        type: string
      id:
        type: string
      labor_cost:
        type: integer
      last_maintenance_date:
        type: string
      maintenance_completion_date:
        type: string
      maintenance_duration:
        type: string
      maintenance_notes:
        type: string
      maintenance_status:
        $ref: '#/definitions/enums.MaintenanceStatus'
      maintenance_type:
        type: string
      next_maintenance_due_date:
        type: string
      odometer_reading:
        type: integer
      parts:
        items:
          $ref: '#/definitions/maintenancedtos.PartOutputDTO'
        type: array
      parts_cost:
        type: integer
      scheduled_maintenance:
        type: boolean
    required:
    - last_maintenance_date
    - maintenance_completion_date
    - maintenance_status
    - next_maintenance_due_date
    type: object
  maintenancedtos.PartInputDTO:
    properties:
      cost:
        type: integer
      name:
        type: string
      quantity:
        type: integer
      replacement_date:
        type: string
    required:
    - name
    type: object
  maintenancedtos.PartOutputDTO:
    properties:
      cost:
        type: integer
      id:
        type: string
      maintenance_id:
        type: string
      name:
        type: string
      quantity:
        type: integer
      replacement_date:
        type: string
    type: object
  orderdto.OrderInputPartialDTO:
    properties:
      order_status:
        type: boolean
      rental_end_date:
        type: string
      rental_start_date:
        type: string
      total_cost:
        type: number
    required:
    - order_status
    - rental_end_date
    - rental_start_date
    - total_cost
    type: object
  orderdto.OrderOutputDTO:
    properties:
      car_id:
        type: string
      id:
        type: string
      order_status:
        type: boolean
      rental_end_date:
        type: string
      rental_start_date:
        type: string
      total_cost:
        type: number
      user_id:
        type: string
    type: object
  reviewdto.ReviewInputDTO:
    properties:
      car_id:
        type: string
      content:
        maxLength: 500
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: integer
      user_id:
        type: string
    required:
    - car_id
    - content
    - rating
    type: object
  reviewdto.ReviewOutputDTO:
    properties:
      carId:
        type: string
      content:
        type: string
      id:
        type: string
      rating:
        type: integer
      userId:
        type: string
    type: object
  specificationdtos.SpecificationInputDto:
    properties:
      car_id:
        type: string
      description:
        type: string
      name:
        type: string
    required:
    - car_id
    - description
    - name
    type: object
  specificationdtos.SpecificationOutputDto:
    properties:
      car_id:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  userdtos.UserInputDTO:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      role:
        allOf:
        - $ref: '#/definitions/domain.Role'
        enum:
        - admin
        - user
        - manager
      status:
        type: boolean
    required:
    - email
    - name
    - password
    - role
    - status
    type: object
  userdtos.UserOutPutDTO:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: boolean
    type: object
  userdtos.UserUpdateDTO:
    properties:
      avatar:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: boolean
    required:
    - email
    type: object
  validation_errors.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  validation_errors.HTTPErrorCar:
    properties:
      code:
        example: 422
        type: integer
      errors:
        example:
        - '[''name is required'''
        - ' ''description is required'''
        - ' ''licenseplate is required'''
        - ' ''brand is required'''
        - ' ''A car needs a category to be registered'']'
        items:
          type: string
        type: array
      message:
        example: ""
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/cars/{id}:
    get:
      consumes:
      - application/json
      description: Find a car with the provided id
      operationId: get-car
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: car
          schema:
            $ref: '#/definitions/cardtos.CarOutputDTO'
        "422":
          description: Unprocessable Entity
          schema:
            items:
              $ref: '#/definitions/validation_errors.HTTPError'
            type: array
      security:
      - BearerAuth: []
      summary: Find car
      tags:
      - Car
  /api/v1/cars/create:
    post:
      consumes:
      - application/json
      description: Create a new car with the provided information
      operationId: post-car
      parameters:
      - description: Car information to be created
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/cardtos.CarInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created car
          schema:
            $ref: '#/definitions/cardtos.CarOutputDTO'
        "422":
          description: Unprocessable Entity
          schema:
            items:
              $ref: '#/definitions/validation_errors.HTTPErrorCar'
            type: array
      security:
      - BearerAuth: []
      summary: Create a new car
      tags:
      - Car
  /api/v1/cars/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a car with the provided ID.
      operationId: delete-car
      parameters:
      - description: Car ID to be deleted
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Car deleted successfully
        "400":
          description: Error details
          schema:
            $ref: '#/definitions/validation_errors.HTTPErrorCar'
      security:
      - ApiKeyAuth: []
      summary: Delete a car
      tags:
      - Car
  /api/v1/cars/update/{id}:
    put:
      consumes:
      - application/json
      description: Update a car with the provided ID.
      operationId: put-car
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Car information to be updated
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/cardtos.CarInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully updated car
          schema:
            $ref: '#/definitions/cardtos.CarOutputDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation_errors.HTTPErrorCar'
      security:
      - BearerAuth: []
      summary: Update a car
      tags:
      - Car
  /api/v1/category/create:
    post:
      consumes:
      - application/json
      description: Create a new category with the provided information.
      operationId: post-category
      parameters:
      - description: Category information to be created
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/categorydtos.CategoryInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created category
          schema:
            $ref: '#/definitions/categorydtos.CategoryOutputDTO'
      security:
      - BearerAuth: []
      summary: Create a new category (Authentication needed)
      tags:
      - Category
  /api/v1/category/list:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all categories.
      operationId: list-categories
      parameters:
      - description: Limit the number of categories to be retrieved
        in: query
        name: limit
        type: integer
      - description: Offset for pagination of categories
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            items:
              $ref: '#/definitions/categorydtos.CategoryOutputDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation_errors.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Retrieve a list of categories
      tags:
      - Category
  /api/v1/maintenance/{carID}/maintenance/create:
    post:
      consumes:
      - application/json
      description: Create a new maintenance with the provided information
      operationId: post-maintenance
      parameters:
      - description: CarID
        in: path
        name: carID
        required: true
        type: string
      - description: Maintenance information to be created
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/maintenancedtos.MaintenanceInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created maintenance
          schema:
            $ref: '#/definitions/maintenancedtos.MaintenanceOutputDTO'
        "422":
          description: Unprocessable Entity
          schema:
            items:
              $ref: '#/definitions/validation_errors.HTTPErrorCar'
            type: array
      security:
      - BearerAuth: []
      summary: Create a new maintenance
      tags:
      - Maintenance
  /api/v1/maintenance/{carID}/maintenances:
    get:
      consumes:
      - application/json
      description: Get a list of maintenances associated with a specific carID
      operationId: get-maintenances-by-carID
      parameters:
      - description: CarID
        in: path
        name: carID
        required: true
        type: string
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page (default 10)
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved maintenances
          schema:
            items:
              $ref: '#/definitions/maintenancedtos.MaintenanceOutputDTO'
            type: array
        "422":
          description: Validation errors
          schema:
            items:
              $ref: '#/definitions/validation_errors.HTTPError'
            type: array
      security:
      - BearerAuth: []
      summary: Get maintenances by carID
      tags:
      - Maintenance
  /api/v1/maintenance/{maintenanceID}:
    delete:
      consumes:
      - application/json
      description: Delete a maintenance with the provided ID.
      operationId: delete-maintenance
      parameters:
      - description: Maintenance ID to be deleted
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Maintenance deleted successfully
        "400":
          description: Error details
          schema:
            $ref: '#/definitions/validation_errors.HTTPErrorCar'
      security:
      - BearerAuth: []
      summary: Delete a maintenance
      tags:
      - Maintenance
    patch:
      consumes:
      - application/json
      description: Update an existing maintenance with the provided information
      operationId: patch-maintenance
      parameters:
      - description: maintenanceID
        in: path
        name: maintenanceID
        required: true
        type: string
      - description: Maintenance information to be updated
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/maintenancedtos.MaintenanceInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated maintenance
          schema:
            $ref: '#/definitions/maintenancedtos.MaintenanceOutputDTO'
      security:
      - BearerAuth: []
      summary: Update an existing maintenance
      tags:
      - Maintenance
  /api/v1/maintenance/by/{maintenance_status}:
    get:
      consumes:
      - application/json
      description: Get a list of maintenances by its status
      operationId: get-maintenances-by-status
      parameters:
      - description: maintenance_status
        enum:
        - Scheduled
        - InProgress
        - Completed
        - PendingApproval
        - Canceled
        - AwaitingParts
        - AwaitingPayment
        - Rescheduled
        - MaintenanceFailed
        - AwaitingInspection
        in: path
        name: maintenance_status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved maintenances
          schema:
            items:
              $ref: '#/definitions/maintenancedtos.MaintenanceOutputDTO'
            type: array
        "422":
          description: Validation errors
          schema:
            items:
              $ref: '#/definitions/validation_errors.HTTPError'
            type: array
      security:
      - BearerAuth: []
      summary: Get maintenances by its status
      tags:
      - Maintenance
  /api/v1/maintenance/latest/{carID}:
    get:
      consumes:
      - application/json
      description: Get latest maintenance associated with a specific carID
      operationId: get-latest-maintenances-by-carID
      parameters:
      - description: CarID
        in: path
        name: carID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved maintenances
          schema:
            items:
              $ref: '#/definitions/maintenancedtos.MaintenanceOutputDTO'
            type: array
        "422":
          description: Validation errors
          schema:
            items:
              $ref: '#/definitions/validation_errors.HTTPError'
            type: array
      security:
      - BearerAuth: []
      summary: Get latest maintenance by carID
      tags:
      - Maintenance
  /api/v1/maintenance/maintenance/by-date-range:
    get:
      consumes:
      - application/json
      description: Get maintenance records within the specified date range
      operationId: get-maintenances-by-date-range
      parameters:
      - description: 'Start date of the range (format: ''2006-01-02'')'
        in: query
        name: startDate
        required: true
        type: string
      - description: 'End date of the range (format: ''2006-01-02'')'
        in: query
        name: endDate
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved maintenance records
          schema:
            items:
              $ref: '#/definitions/maintenancedtos.MaintenanceOutputDTO'
            type: array
        "422":
          description: Unprocessable Entity
          schema:
            items:
              $ref: '#/definitions/validation_errors.HTTPErrorCar'
            type: array
      security:
      - BearerAuth: []
      summary: Get maintenance records by date range
      tags:
      - Maintenance
  /api/v1/maintenance/maintenances:
    get:
      consumes:
      - application/json
      description: Retrieve a list of maintenance records for a specific car
      operationId: get-maintenance-list
      parameters:
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page (default is 10)
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of maintenance records
          schema:
            items:
              $ref: '#/definitions/maintenancedtos.MaintenanceOutputDTO'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/validation_errors.HTTPErrorCar'
      security:
      - BearerAuth: []
      summary: Retrieve a list of maintenance records
      tags:
      - Maintenance
  /api/v1/maintenance/scheduled:
    get:
      description: Get a list of scheduled maintenances based on the next maintenance
        due date
      operationId: get-scheduled-maintenances
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved scheduled maintenances
          schema:
            items:
              $ref: '#/definitions/maintenancedtos.MaintenanceOutputDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get scheduled maintenances
      tags:
      - Maintenance
  /api/v1/review/{review_id}:
    delete:
      description: Delete a review with the provided ID
      operationId: delete-review
      parameters:
      - description: Review ID to be delete
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Error details
          schema:
            $ref: '#/definitions/validation_errors.HTTPErrorCar'
      security:
      - BearerAuth: []
      summary: Delete a review
      tags:
      - Reviews
  /api/v1/review/list:
    get:
      consumes:
      - application/json
      description: Get all reviewsn
      operationId: get-review
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created review
          schema:
            items:
              $ref: '#/definitions/reviewdto.ReviewOutputDTO'
            type: array
      security:
      - BearerAuth: []
      summary: Get all reviews
      tags:
      - Reviews
  /api/v1/reviews/:id:
    put:
      consumes:
      - application/json
      description: Update an existing review with the provided information
      operationId: put-review
      parameters:
      - description: Review ID to be updated
        in: path
        name: id
        required: true
        type: string
      - description: Review information to be updated
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/reviewdto.ReviewInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated review
          schema:
            $ref: '#/definitions/reviewdto.ReviewOutputDTO'
        "404":
          description: Review not found
          schema: {}
        "422":
          description: Unprocessable Entity
          schema:
            items:
              $ref: '#/definitions/validation_errors.HTTPError'
            type: array
      security:
      - BearerAuth: []
      summary: Update an existing review
      tags:
      - Reviews
  /api/v1/reviews/create:
    post:
      consumes:
      - application/json
      description: Create a new review with the provided information
      operationId: post-review
      parameters:
      - description: Review information to be created
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/reviewdto.ReviewInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created review
          schema:
            $ref: '#/definitions/reviewdto.ReviewOutputDTO'
        "422":
          description: Unprocessable Entity
          schema:
            items:
              $ref: '#/definitions/validation_errors.HTTPError'
            type: array
      security:
      - BearerAuth: []
      summary: Create a new review
      tags:
      - Reviews
  /api/v1/specification/create:
    post:
      consumes:
      - application/json
      description: Create a new specification with the provided information.
      operationId: post-specification
      parameters:
      - description: Specification information to be created
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/specificationdtos.SpecificationInputDto'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created specification
          schema:
            $ref: '#/definitions/specificationdtos.SpecificationOutputDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validation_errors.HTTPError'
      security:
      - BearerAuth: []
      summary: Create a new specification
      tags:
      - Specification
  /cars:
    get:
      consumes:
      - application/json
      description: Retrieve a list of cars with pagination support.
      operationId: list-car
      parameters:
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page (default is 10)
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of cars
          schema:
            items:
              $ref: '#/definitions/cardtos.CarOutputDTO'
            type: array
        "422":
          description: Unprocessable Entity
          schema:
            items:
              $ref: '#/definitions/validation_errors.HTTPError'
            type: array
      summary: List all cars
      tags:
      - Car
  /login:
    post:
      consumes:
      - application/json
      description: Create a new maintenance with the provided information
      operationId: login
      parameters:
      - description: information to log in
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authdto.LoginInputDTO'
      produces:
      - application/json
      responses: {}
      summary: Create a new user
      tags:
      - Auth
  /orders:
    get:
      consumes:
      - application/json
      description: Fetches orders based on query parameters such as options and userID.
      parameters:
      - description: Query parameters for filtering orders
        in: query
        name: options
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/orderdto.OrderOutputDTO'
            type: array
      security:
      - BearerAuth: []
      summary: Get orders by query parameters
      tags:
      - Orders
  /orders/{carID}:
    post:
      consumes:
      - application/json
      description: Create a new order with the given parameters
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Car ID
        in: path
        name: carID
        required: true
        type: string
      - description: Order input data
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/orderdto.OrderInputPartialDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Created order
          schema:
            $ref: '#/definitions/orderdto.OrderOutputDTO'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - Orders
  /orders/{order_id}:
    delete:
      consumes:
      - application/json
      description: Deletes an order by its ID
      operationId: delete-order-by-id
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: error
          schema:
            type: string
        "404":
          description: Order not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
        default:
          description: other error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete order by ID
      tags:
      - Orders
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      operationId: sign-up
      parameters:
      - description: user information to be created
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userdtos.UserInputDTO'
      produces:
      - application/json
      responses: {}
      summary: Create a new user
      tags:
      - Auth
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userdtos.UserOutPutDTO'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Update user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userdtos.UserUpdateDTO'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userdtos.UserUpdateDTO'
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - User
  /user/change-password:
    post:
      consumes:
      - application/json
      description: Change user password by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Change Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authdto.ChangePasswordDTO'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
